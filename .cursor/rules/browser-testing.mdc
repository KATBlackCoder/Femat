---
globs: "**/*.test.ts,**/*.spec.ts,**/*.e2e.ts"
description: "Règles de test automatisé avec Browser MCP pour le projet FEMAT"
---

# Règles de Test Browser MCP - FEMAT

## Tests End-to-End

### Structure des tests
- Utiliser Browser MCP pour les tests E2E complets
- Tester les flux utilisateur critiques
- Valider l'intégration des composants NuxtUI
- Vérifier la responsivité sur différents appareils

### Tests de navigation
```typescript
// Test de navigation principale
await browser.navigate('http://localhost:3000')
await browser.snapshot()
await browser.click('nav a[href="/news"]')
await browser.wait(2000)
await browser.screenshot()
```

### Tests de formulaires
```typescript
// Test d'inscription membre
await browser.navigate('http://localhost:3000/members/register')
await browser.type('input[name="nom"]', 'John Doe')
await browser.type('input[name="email"]', 'john@example.com')
await browser.click('button[type="submit"]')
await browser.wait(3000)
```

## Tests d'Accessibilité

### Validation a11y
- Utiliser les snapshots d'accessibilité
- Vérifier la navigation au clavier
- Tester les lecteurs d'écran
- Valider les contrastes de couleurs

### Tests de composants NuxtUI
```typescript
// Test d'accessibilité des composants
await browser.snapshot()
await browser.pressKey('Tab')
await browser.pressKey('Enter')
await browser.snapshot()
```

## Tests de Performance

### Mesure des temps de chargement
- Capturer les métriques de performance
- Tester sur différentes connexions
- Valider le cache et les optimisations
- Mesurer les Core Web Vitals

### Tests de responsivité
```typescript
// Test responsive design
await browser.navigate('http://localhost:3000')
await browser.screenshot() // Desktop
await browser.setViewport({ width: 375, height: 667 })
await browser.screenshot() // Mobile
```

## Tests Spécifiques FEMAT

### Flux d'inscription
- Test du processus d'inscription des membres
- Validation des données saisies
- Test des erreurs de validation
- Vérification des emails de confirmation

### Gestion des événements
- Test de création d'événements
- Test d'inscription aux événements
- Validation des dates et horaires
- Test des notifications

### Administration
- Test des fonctionnalités admin
- Validation des permissions
- Test de la gestion des utilisateurs
- Vérification des logs d'audit

## Configuration des Tests

### Variables d'environnement
```bash
# Configuration des tests
TEST_BASE_URL=http://localhost:3000
TEST_TIMEOUT=30000
TEST_HEADLESS=false
TEST_VIEWPORT_WIDTH=1280
TEST_VIEWPORT_HEIGHT=720
```

### Configuration Browser MCP
```typescript
// Configuration des tests
export const browserConfig = {
  baseUrl: process.env.TEST_BASE_URL || 'http://localhost:3000',
  timeout: parseInt(process.env.TEST_TIMEOUT || '30000'),
  headless: process.env.TEST_HEADLESS === 'true',
  viewport: {
    width: parseInt(process.env.TEST_VIEWPORT_WIDTH || '1280'),
    height: parseInt(process.env.TEST_VIEWPORT_HEIGHT || '720')
  }
}
```

## Bonnes Pratiques

### Sécurité des tests
- Utiliser des données de test non sensibles
- Isoler les environnements de test
- Nettoyer les données après les tests
- Ne pas exposer les tokens de production

### Performance des tests
- Optimiser les temps d'attente
- Utiliser les snapshots d'accessibilité
- Capturer les screenshots uniquement si nécessaire
- Paralléliser les tests indépendants

### Maintenance
- Documenter les tests automatisés
- Maintenir les sélecteurs d'éléments
- Mettre à jour les tests lors des changements UI
- Surveiller les performances des tests

## Références

- [Documentation Browser MCP](https://browsermcp.io/)
- [Architecture FEMAT](mdc:architecture.md) - Architecture de test
- [TODO.md](mdc:TODO.md) - Plan de développement
- [Configuration MCP](mdc:.cursor/mcp.json) - Configuration complète