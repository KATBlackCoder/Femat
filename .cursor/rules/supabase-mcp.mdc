---
alwaysApply: true
description: "Configuration et utilisation de Supabase avec support MCP pour l'assistance IA"
---

# Supabase MCP Configuration

## Configuration MCP Server

Le projet FEMAT utilise Supabase avec support MCP pour une meilleure assistance IA avec la base de données. La configuration MCP est définie dans [.cursor/mcp.json](mdc:.cursor/mcp.json).

### Configuration MCP Supabase
```json
{
  "mcpServers": {
    "supabase": {
      "command": "pnpm",
      "args": [
        "dlx",
        "@supabase/mcp-server-supabase",
        "--read-only",
        "--project-ref=<project-ref>"
      ],
      "env": {
        "SUPABASE_ACCESS_TOKEN": "<access-token>"
      }
    }
  }
}
```

## Utilisation de Supabase avec MCP

### Règles de développement
- Toujours utiliser le mode `--read-only` pour la sécurité
- Utiliser `--project-ref` pour limiter l'accès à un projet spécifique
- Ne jamais exposer les tokens d'accès dans le code
- Utiliser les variables d'environnement pour les tokens

### Sécurité et bonnes pratiques
- **Mode lecture seule** : Utiliser `--read-only` pour éviter les modifications accidentelles
- **Scoping projet** : Limiter l'accès à un projet spécifique avec `--project-ref`
- **Tokens sécurisés** : Stocker les tokens dans les variables d'environnement
- **Développement uniquement** : Ne pas connecter à la production

### Commandes utiles avec MCP
- "Create a new Supabase project"
- "Show me the database schema"
- "Create a table for members"
- "Fetch project configuration"
- "List all tables in the database"

## Intégration avec l'architecture FEMAT

### Base de données
- **PostgreSQL** : Base de données principale via Supabase
- **API automatique** : Génération automatique des APIs REST/GraphQL
- **Authentification** : Gestion des utilisateurs intégrée
- **Interface admin** : Dashboard pour gérer les données

### Modèles de données FEMAT
- **Membres** : Licenciés, clubs, grades, dates d'adhésion
- **Événements** : Compétitions, stages, formations
- **Résultats** : Classements, performances, historique
- **Administration** : Utilisateurs admin, permissions, logs

### Configuration des variables d'environnement
```bash
# Variables d'environnement pour Supabase
SUPABASE_URL=your-supabase-url
SUPABASE_ANON_KEY=your-supabase-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
```

## Développement avec Supabase MCP

### Création de tables
- Utiliser les commandes MCP pour créer les schémas
- Définir les relations entre les tables
- Configurer les politiques de sécurité (RLS)

### Gestion des données
- Requêtes optimisées via l'assistance IA
- Validation des données avant insertion
- Gestion des erreurs et exceptions

### Authentification
- Configuration des providers d'authentification
- Gestion des rôles et permissions
- Protection des routes sensibles

## Monitoring et sécurité

### Surveillance
- Vérifier les logs d'accès
- Monitorer les performances des requêtes
- Surveiller l'utilisation des ressources

### Sécurité
- Activer Row Level Security (RLS)
- Configurer les politiques d'accès
- Utiliser des tokens avec permissions limitées
- Ne jamais exposer les clés de service

## Références

- [Documentation Supabase MCP](https://supabase.com/docs/guides/getting-started/mcp)
- [Architecture FEMAT](mdc:architecture.md) - Architecture complète du projet
- [TODO.md](mdc:TODO.md) - Plan de développement
- [Configuration Supabase](mdc:.cursor/mcp.json) - Configuration MCP